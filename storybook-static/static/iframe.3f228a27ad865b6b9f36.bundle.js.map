{"version":3,"file":"static/iframe.3f228a27ad865b6b9f36.bundle.js","sources":["webpack:///./src/notifications-context.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { createPortal } from \"./Portal\";\r\n\r\ninterface NotificationType {\r\n  type: string;\r\n  content: string;\r\n  id?: string;\r\n}\r\ninterface NotificationContext {\r\n  notifications: Array<NotificationType>;\r\n  push(notification: NotificationType): void;\r\n}\r\nconst Context = React.createContext({\r\n  notifications: [],\r\n  push() {}\r\n} as NotificationContext);\r\n\r\nexport interface ProviderProps {\r\n  children: React.ReactNode;\r\n}\r\nconst fixed = document.createElement(\"div\");\r\nfixed.id = \"iui-notification-portal\";\r\nfixed.className = \"iui-fixed iui-fixed--bottom iui-fixed--right\";\r\nconst container = document.createElement(\"div\");\r\ncontainer.className = \"iui-fixed__container\";\r\ndocument.body.prepend(fixed);\r\nfixed.appendChild(container);\r\n\r\nconst Portal = createPortal(container);\r\n\r\nexport class Provider extends React.Component<\r\n  ProviderProps,\r\n  { notifications: Array<NotificationType> }\r\n> {\r\n  state = {\r\n    notifications: [{ type: \"Hello\", content: \"Hello\" }]\r\n  };\r\n  push = (notification: NotificationType) => {\r\n    this.setState(({ notifications }) => {\r\n      return {\r\n        notifications: [...notifications, notification]\r\n      };\r\n    });\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <Context.Provider\r\n        value={\r\n          {\r\n            notifications: this.state.notifications,\r\n            push: this.push\r\n          } as NotificationContext\r\n        }\r\n      >\r\n        {this.props.children}\r\n        {this.state.notifications\r\n          .map(x => x)\r\n          .reverse()\r\n          .map((x: NotificationType, i: number) => {\r\n            return (\r\n              <Portal key={i}>\r\n                <div className=\"iui-fixed__toast\">{x.content}</div>\r\n              </Portal>\r\n            );\r\n          })}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n\r\nexport const withNotifications = <P extends object>(\r\n  Element: React.ComponentType<P>\r\n) => {\r\n  return function NotificationConsumer(\r\n    props: React.ComponentType<P & NotificationType>\r\n  ) {\r\n    return (\r\n      <Consumer>\r\n        {({ push, notifications }) => (\r\n          <Element {...{ ...(props as P), push, notifications }} />\r\n        )}\r\n      </Consumer>\r\n    );\r\n  };\r\n};\r\n"],"mappings":"AAAA","sourceRoot":""}